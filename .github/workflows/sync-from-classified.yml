name: Sync from Classified Repository

on:
  # Schedule trigger - Run weekly on Monday at UTC 6:00 (Beijing Time 14:00)
  schedule:
    - cron: '0 6 * * 1'

  # Manual trigger
  workflow_dispatch:
    inputs:
      reason:
        description: 'Manual sync reason'
        required: false
        default: 'Manual sync test'
        type: string

# Allow this workflow to write to the repository
permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_TOKEN }}
        fetch-depth: 0  # Fetch complete history

    - name: Configure Git
      run: |
        git config --global user.name "ChHsiching"
        git config --global user.email "hsichingchang@gmail.com"

    - name: Display environment info
      run: |
        echo "Current time: $(date)"
        echo "Trigger reason: ${{ github.event_name }}"
        echo "Working directory: $(pwd)"
        echo "Repository: ${{ github.repository }}"

    - name: Show current Git status
      run: |
        echo "=== Current branches ==="
        git branch -a
        echo "=== Recent commits ==="
        git log --oneline -n 5
        echo "=== Working directory status ==="
        git status
        echo "=== Detailed status for debugging ==="
        git status --porcelain

    - name: Checkout Classified repository
      run: |
        echo "=== Checkout Classified repository ==="
        cd ..
        if [ -d "GitHub-Chinese-Top-Charts-Classified" ]; then
          echo "Classified repository exists, updating..."
          cd GitHub-Chinese-Top-Charts-Classified
          git pull https://${{ secrets.GH_TOKEN }}@github.com/ChHsiching/GitHub-Chinese-Top-Charts-Classified.git main
        else
          echo "Cloning Classified repository..."
          git clone https://${{ secrets.GH_TOKEN }}@github.com/ChHsiching/GitHub-Chinese-Top-Charts-Classified.git
        fi
        echo "Classified repository checkout completed"

    - name: Execute sync script
      run: |
        echo "=== Executing sync script ==="
        ./scripts/sync_from_classified.sh

    - name: Show sync results
      run: |
        echo "=== Sync results ==="
        if [ -f "sync.log" ]; then
          echo "Sync log:"
          cat sync.log
        fi

        echo "=== Latest commits ==="
        git log --oneline -n 10

        echo "=== sync-data branch status ==="
        if git show-ref --verify --quiet "refs/heads/sync-data"; then
          git checkout sync-data
          echo "Latest commits in sync-data branch:"
          git log --oneline -n 5
          echo "Number of rows in All Language table in README.md:"
          grep -c "^\|" README.md || echo "0"
        else
          echo "sync-data branch does not exist"
        fi

    - name: Check for changes
      id: check-changes
      run: |
        if git show-ref --verify --quiet "refs/heads/sync-data"; then
          if git log --oneline main..sync-data | grep -q "."; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Detected new changes in sync-data branch"
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "sync-data branch exists but no new changes"
          fi
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "sync-data branch does not exist"
        fi

    - name: Create sync status badge
      if: always()
      run: |
        echo "=== Creating sync status ==="
        echo "Sync time: $(date -u)" > SYNC_STATUS.md
        echo "Trigger method: ${{ github.event_name }}" >> SYNC_STATUS.md
        echo "Sync status: ${{ job.status }}" >> SYNC_STATUS.md
        if [ "${{ steps.check-changes.outputs.has_changes }}" = "true" ]; then
          echo "Has new updates: Yes" >> SYNC_STATUS.md
        else
          echo "Has new updates: No" >> SYNC_STATUS.md
        fi

    - name: Commit status file
      if: always()
      run: |
        git rm -f sync.log 2>/dev/null || true
        git checkout main
        git add SYNC_STATUS.md 2>/dev/null || true
        if git diff --cached --quiet; then
          echo "No updates to status file"
        else
          git commit -m "Update sync status: $(date -u)" || echo "Status file commit failed"
        fi

    - name: Merge sync-data to main
      if: steps.check-changes.outputs.has_changes == 'true'
      run: |
        echo "=== Merging sync-data branch to main branch ==="
        git checkout main

        # Merge sync-data branch
        if git merge --no-ff sync-data -m "Auto merge Classified data sync: $(date '+%Y-%m-%d %H:%M:%S')" --allow-unrelated-histories; then
          echo "Merge successful"
        else
          echo "Merge conflicts detected, attempting to resolve..."

          # Show conflict status
          echo "Conflicting files:"
          git diff --name-only --diff-filter=U

          # Resolve conflicts: prefer sync-data branch version
          git checkout --theirs .
          git add .
          git commit -m "Auto merge Classified data sync (conflicts resolved): $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Conflicts resolved, using sync-data branch version"
        fi

    - name: Push changes
      run: |
        git checkout main
        git push origin main

        # Push sync-data branch
        if git show-ref --verify --quiet "refs/heads/sync-data"; then
          git push origin sync-data || echo "sync-data branch push failed"
        fi

    - name: Notify on failure
      if: failure()
      run: |
        echo "⚠️ Sync failed!"
        echo "Repository: ${{ github.repository }}"
        echo "Run number: ${{ github.run_number }}"
        echo "Failure time: $(date -u)"

    - name: Notify on success with changes
      if: success() && steps.check-changes.outputs.has_changes == 'true'
      run: |
        echo "✅ Sync successful, new updates found!"
        echo "Repository: ${{ github.repository }}"
        echo "Update time: $(date -u)"
        echo "Please check sync-data branch and manually merge to main branch"

    - name: Final status
      if: always()
      run: |
        echo "=== Sync workflow completed ==="
        echo "Status: ${{ job.status }}"
        echo "Total runtime: ${{ job.status }}"